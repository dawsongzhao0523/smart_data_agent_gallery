import gradio as gr
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
from io import BytesIO
from main import run, add_to_queue,gradio_interface
import io
import sys
import time
import os
import pandas as pd
OPENAI_KEY = None
css = """#col-container {max-width: 90%; margin-left: auto; margin-right: auto; display: flex; flex-direction: column;}
#header {text-align: center;}
#col-chatbox {flex: 1; max-height: min(750px, 100%);}
#label {font-size: 4em; padding: 0.5em; margin: 0;}
.scroll-hide {overflow-y: scroll; max-height: 100px;}
.wrap {max-height: 680px;}
.message {font-size: 3em;}
.message-wrap {max-height: min(700px, 100vh);}
body {
        background-color: #ADD8E6;
    }
"""

# plt.rcParams['font.sans-serif'] = ['Arial Unicode MS']
# plt.rcParams['axes.unicode_minus'] = False

plt.rcParams['font.sans-serif'] = ['WenQuanYi Zen Hei', 'Noto Sans CJK']
plt.rcParams['axes.unicode_minus'] = False


example_stock =['ÁªôÊàëÁîª‰∏Ä‰∏ãÂèØÂ≠öÂåªÁñó2022Âπ¥Âπ¥‰∏≠Âà∞‰ªäÂ§©ÁöÑËÇ°‰ª∑','ÂåóÂêëËµÑÈáë‰ªäÂπ¥ÁöÑÊØèÊó•ÊµÅÂÖ•ÂíåÁ¥ØËÆ°ÊµÅÂÖ•','Áúã‰∏Ä‰∏ãËøë‰∏âÂπ¥ÂÆÅÂæ∑Êó∂‰ª£ÂíåË¥µÂ∑ûËåÖÂè∞ÁöÑpbÂèòÂåñ','Áîª‰∏Ä‰∏ã‰∫îÁ≤ÆÊ∂≤ÂíåÊ≥∏Â∑ûËÄÅÁ™ñ‰ªé2019Âπ¥Âπ¥ÂàùÂà∞2022Âπ¥Âπ¥‰∏≠ÁöÑÊî∂ÁõäÁéáËµ∞Âäø','ÊàêÈÉΩÈì∂Ë°åËøë‰∏ÄÂπ¥ÁöÑkÁ∫øÂõæÂíåkdjÊåáÊ†á','ÊØîËæÉ‰∏ãÊ≤™Ê∑±300,Âàõ‰∏öÊùøÊåá,‰∏≠ËØÅ1000ÊåáÊï∞‰ªäÂπ¥ÁöÑÊî∂ÁõäÁéá','‰ªäÂπ¥‰∏äËØÅ50ÊâÄÊúâÊàêÂàÜËÇ°ÁöÑÊî∂ÁõäÁéáÊòØÂ§öÂ∞ë']
example_economic =['‰∏≠ÂõΩËøáÂéªÂçÅÂπ¥ÁöÑcpiËµ∞ÂäøÊòØ‰ªÄ‰πà','ËøáÂéª‰∫îÂπ¥‰∏≠ÂõΩÁöÑË¥ßÂ∏Å‰æõÂ∫îÈáèËµ∞Âäø,Âπ∂‰∏îÊâìÂç∞‰øùÂ≠ò','ÊàëÊÉ≥ÁúãÁúãÁé∞Âú®ÁöÑÊñ∞ÈóªÊàñËÄÖÊúÄÊñ∞ÁöÑÊ∂àÊÅØ','ÊàëÊÉ≥ÁúãÁúã‰∏≠ÂõΩËøëÂçÅÂπ¥gdpÁöÑËµ∞Âäø','È¢ÑÊµã‰∏≠ÂõΩÊú™Êù•12‰∏™Â≠£Â∫¶ÁöÑGDPÂ¢ûÈÄü']
example_fund =['ÊòìÊñπËææÁöÑÂº†Âù§ÁÆ°ÁêÜ‰∫ÜÂá†‰∏™Âü∫Èáë','Âü∫ÈáëÁªèÁêÜÂë®Êµ∑Ê†ãÂêç‰∏ãÁöÑÊâÄÊúâÂü∫Èáë‰ªäÂπ¥ÁöÑÊî∂ÁõäÁéáÊÉÖÂÜµ','ÊàëÊÉ≥ÁúãÁúãÂë®Êµ∑Ê†ãÁÆ°ÁêÜÁöÑÂçéÂïÜ‰ºòÂäøË°å‰∏öÁöÑËøë‰∏âÂπ¥Êù•ÁöÑÁöÑÂáÄÂÄºÊõ≤Á∫ø','ÊØîËæÉ‰∏ãÂçéÂïÜ‰ºòÂäøË°å‰∏öÂíåÊòìÊñπËææËìùÁ≠πÁ≤æÈÄâËøô‰∏§Âè™Âü∫ÈáëÁöÑËøë‰∏âÂπ¥ÁöÑÊî∂ÁõäÁéá']
example_company =['‰ªãÁªç‰∏ãË¥µÂ∑ûËåÖÂè∞,ËøôÂÖ¨Âè∏ÊòØÂπ≤‰ªÄ‰πàÁöÑ,‰∏ªËê•‰∏öÂä°ÊòØ‰ªÄ‰πà','ÊàëÊÉ≥ÊØîËæÉ‰∏ãÂ∑•ÂïÜÈì∂Ë°åÂíåË¥µÂ∑ûËåÖÂè∞ËøëÂçÅÂπ¥ÁöÑÂáÄËµÑ‰∫ßÂõûÊä•Áéá','‰ªäÂπ¥‰∏ÄÂ≠£Â∫¶‰∏äËØÅ50ÁöÑÊàêÂàÜËÇ°ÁöÑÂΩíÊØçÂáÄÂà©Ê∂¶ÂêåÊØîÂ¢ûÈÄüÂàÜÂà´ÊòØ']

class Client:
    def __init__(self) -> None:
        self.OPENAI_KEY = OPENAI_KEY
        self.OPENAI_API_BASED_AZURE = None
        self.OPENAI_ENGINE_AZURE = None
        self.OPENAI_API_KEY_AZURE = None
        self.stop = False  # Ê∑ªÂä†ÂÅúÊ≠¢Ê†áÂøó

    def set_key(self, openai_key, openai_key_azure, api_base_azure, engine_azure):
        self.OPENAI_KEY = openai_key
        self.OPENAI_API_BASED_AZURE = api_base_azure
        self.OPENAI_API_KEY_AZURE = openai_key_azure
        self.OPENAI_ENGINE_AZURE = engine_azure
        return self.OPENAI_KEY, self.OPENAI_API_KEY_AZURE, self.OPENAI_API_BASED_AZURE, self.OPENAI_ENGINE_AZURE


    def run(self, messages):
        if self.OPENAI_KEY == '' and self.OPENAI_API_KEY_AZURE == '':
            yield '', np.zeros((100, 100, 3), dtype=np.uint8), "Please set your OpenAI API key first!!!", pd.DataFrame()
        elif len(self.OPENAI_KEY) >= 0 and not self.OPENAI_KEY.startswith('sk') and self.OPENAI_API_KEY_AZURE == '':
            yield '', np.zeros((100, 100, 3), dtype=np.uint8), "Your openai key is incorrect!!!", pd.DataFrame()
        else:
            # self.stop = False
            gen = gradio_interface(messages, self.OPENAI_KEY, self.OPENAI_API_KEY_AZURE, self.OPENAI_API_BASED_AZURE, self.OPENAI_ENGINE_AZURE)
            while not self.stop:  #
                try:
                    yield next(gen)
                except StopIteration:
                    print("StopIteration")
                    break

            # yield from gradio_interface(messages, self.OPENAI_KEY)
        #return finally_text, img, output, df





with gr.Blocks() as demo:
    state = gr.State(value={"client": Client()})
    def change_textbox(query):
        # Ê†πÊçÆ‰∏çÂêåËæìÂÖ•ÂØπËæìÂá∫Êéß‰ª∂ËøõË°åÊõ¥Êñ∞
        return gr.update(lines=2, visible=True, value=query)
    # ÂõæÁâáÊ°ÜÊòæÁ§∫

    with gr.Row():
        gr.Markdown(
        """
        # Hello Data-Copilot ! üòÄ 
        A powerful AI system connects humans and data.
        The current version only supports Chinese financial data, in the future we will support for other country data
        """)


    if not OPENAI_KEY:
        with gr.Row().style():
            with gr.Column(scale=0.9):
                gr.Markdown(
                    """
                    You can use gpt35 from openai or from openai-azure.
                    """)
                openai_api_key = gr.Textbox(
                    show_label=False,
                    placeholder="Set your OpenAI API key here and press Submit  (e.g. sk-xxx)",
                    lines=1,
                    type="password"
                ).style(container=False)

                with gr.Row():
                    openai_api_key_azure = gr.Textbox(
                        show_label=False,
                        placeholder="Set your Azure-OpenAI key",
                        lines=1,
                        type="password"
                    ).style(container=False)
                    openai_api_base_azure = gr.Textbox(
                        show_label=False,
                        placeholder="Azure-OpenAI api_base (e.g. https://zwq0525.openai.azure.com)",
                        lines=1,
                        type="password"
                    ).style(container=False)
                    openai_api_engine_azure = gr.Textbox(
                        show_label=False,
                        placeholder="Azure-OpenAI engine here (e.g. gpt35)",
                        lines=1,
                        type="password"
                    ).style(container=False)


                gr.Markdown(
                    """
                    It is recommended to use the Openai paid API or Azure-OpenAI service, because the free Openai API will be limited by the access speed and 3 Requests per minute (very slow).
                    """)


            with gr.Column(scale=0.1, min_width=0):
                btn1 = gr.Button("OK").style(height= '100px')

    with gr.Row():
        with gr.Column(scale=0.9):
            input_text = gr.inputs.Textbox(lines=1, placeholder='Please input your problem...', label='what do you want to findÔºü')

        with gr.Column(scale=0.1, min_width=0):
            start_btn = gr.Button("Start").style(full_height=True)
            # end_btn = gr.Button("Stop").style(full_height=True)


    gr.Markdown(
        """
        # Try these examples  ‚û°Ô∏è‚û°Ô∏è
        """)
    with gr.Row():

        example_selector1 = gr.Dropdown(choices=example_stock, interactive=True,
                                        label="Êü•ËÇ°Á•® Query stock:", show_label=True)
        example_selector2 = gr.Dropdown(choices=example_economic, interactive=True,
                                       label="Êü•ÁªèÊµé Query Economy:", show_label=True)
        example_selector3 = gr.Dropdown(choices=example_company, interactive=True,
                                       label="Êü•ÂÖ¨Âè∏ Query Company:", show_label=True)
        example_selector4 = gr.Dropdown(choices=example_fund, interactive=True,
                                        label="Êü•Âü∫Èáë Query Fund:", show_label=True)



    def set_key(state, openai_api_key,openai_api_key_azure, openai_api_base_azure, openai_api_engine_azure):
        return state["client"].set_key(openai_api_key, openai_api_key_azure,openai_api_base_azure, openai_api_engine_azure)


    def run(state, chatbot):
        generator =  state["client"].run(chatbot)
        for solving_step, img, res, df in generator:
            # if state["client"].stop:
            #     print('Stopping generation')
            #     break
            yield solving_step, img, res, df


    # def stop(state):
    #     print('Stop signal received!')
    #     state["client"].stop = True




    with gr.Row():
        with gr.Column(scale=0.3, min_width="500px", max_width="500px", min_height="500px", max_height="500px"):
                Res = gr.Textbox(label="Summary and Result: ")
        with gr.Column(scale=0.7, min_width="500px", max_width="500px", min_height="500px", max_height="500px"):
            solving_step = gr.Textbox(label="Solving Step: ", lines=5)


    img = gr.outputs.Image(type='numpy')
    df = gr.outputs.Dataframe(type='pandas')
    with gr.Row():
        gr.Markdown(
            """
            [Tushare](https://tushare.pro/) provides financial data support for our Data-Copilot. 
            
            [OpenAI](https://openai.com/) provides the powerful Chatgpt model for our Data-Copilot.
            """)


    outputs = [solving_step ,img, Res, df]
    #ËÆæÁΩÆchange‰∫ã‰ª∂
    example_selector1.change(fn = change_textbox, inputs = example_selector1, outputs = input_text)
    example_selector2.change(fn = change_textbox, inputs = example_selector2, outputs = input_text)
    example_selector3.change(fn = change_textbox, inputs = example_selector3, outputs = input_text)
    example_selector4.change(fn = change_textbox, inputs = example_selector4, outputs = input_text)


    if not OPENAI_KEY:
        openai_api_key.submit(set_key, [state, openai_api_key, openai_api_key_azure,openai_api_base_azure, openai_api_engine_azure], [openai_api_key, openai_api_key_azure,openai_api_base_azure, openai_api_engine_azure])
        btn1.click(set_key, [state, openai_api_key, openai_api_key_azure,openai_api_base_azure, openai_api_engine_azure], [openai_api_key,openai_api_key_azure, openai_api_base_azure, openai_api_engine_azure])

    start_btn.click(fn = run, inputs = [state, input_text], outputs=outputs)
    # end_btn.click(stop, state)



demo.queue()
demo.launch()


